# Docker Compose configuration for PHP development environment
# This file defines all services needed for a complete web development stack

# Project name used for container naming and Docker network
# Override in .env: PROJECT_NAME=your-project-name
name: ${PROJECT_NAME:-myproject}

services:
  # =============================================================================
  # NGINX WEB SERVER
  # =============================================================================
  # Serves static files and proxies PHP requests to php-fpm
  # Handles both HTTP and HTTPS traffic with automatic SSL certificate setup
  nginx:
    image: ${NGINX_IMAGE:-nginx:alpine}
    container_name: ${PROJECT_NAME:-myproject}-nginx
    ports:
      # HTTP port - customize in .env with HTTP_PORT
      - "${HTTP_PORT:-8014}:80"
      # HTTPS port - automatically uses HTTP_PORT + 1 unless HTTPS_PORT is set
      - "${HTTPS_PORT:-8015}:443"
    volumes:
      # Mount project files as read-only for security
      - ../public:/var/www/public:ro
      # Custom nginx configuration with PHP-FPM integration
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL certificates directory (generated by cert-init or make certs)
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      # Wait for PHP-FPM to be ready before starting nginx
      - php-fpm
      # Ensure SSL certificates exist before nginx starts
      - cert-init
    restart: unless-stopped

  # =============================================================================
  # SSL CERTIFICATE INITIALIZATION
  # =============================================================================
  # One-time container that ensures SSL certificates exist before nginx starts
  # Creates fallback self-signed certificates if no mkcert certificates found
  cert-init:
    image: alpine:latest
    container_name: ${PROJECT_NAME:-myproject}-cert-init
    volumes:
      # Certificate storage directory
      - ./certs:/certs
      # Scripts for certificate management
      - ./scripts:/scripts:ro
    command: >
      sh -c "
        apk add --no-cache openssl &&
        /scripts/ensure-certs.sh &&
        echo 'Certificate initialization complete'
      "
    working_dir: /

  # =============================================================================
  # PHP-FPM SERVICE
  # =============================================================================
  # Handles PHP code execution for web requests
  # Built from custom Dockerfile with configurable PHP version and extensions
  php-fpm:
    build:
      context: ./php
      dockerfile: Dockerfile.fpm
      args:
        # PHP version - customize in .env: PHP_VERSION=8.1|8.2|8.3
        - PHP_VERSION=${PHP_VERSION:-8.2}
        # PHP extensions - comma-separated list in .env
        - PHP_EXTENSIONS=${PHP_EXTENSIONS:-pdo_mysql,zip,gd}
        # User/Group IDs for file permission consistency with host
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    container_name: ${PROJECT_NAME:-myproject}-php-fpm
    volumes:
      # Mount entire project for development (cached for performance)
      - ../:/var/www:cached
      # Custom PHP configuration optimized for FPM
      - ./php/php-fpm.ini:/usr/local/etc/php/conf.d/custom.ini:ro
    environment:
      # Database connection variables passed to PHP applications
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${MYSQL_DATABASE:-laravel}
      - DB_USERNAME=${MYSQL_USER:-laravel}
      - DB_PASSWORD=${MYSQL_PASSWORD:-laravel}
    depends_on:
      # Wait for MySQL to be ready
      - mysql
    restart: unless-stopped
    # Run as non-root user matching host user for file permissions
    user: "${UID:-1000}:${GID:-1000}"

  # =============================================================================
  # PHP CLI SERVICE
  # =============================================================================
  # Command-line PHP container for running Composer, Artisan, Drush, etc.
  # Includes development tools and stays running for interactive commands
  php-cli:
    build:
      context: ./php
      dockerfile: Dockerfile.cli
      args:
        # Same PHP version as FPM for consistency
        - PHP_VERSION=${PHP_VERSION:-8.2}
        # Same extensions as FPM
        - PHP_EXTENSIONS=${PHP_EXTENSIONS:-pdo_mysql,zip,gd}
        # User/Group IDs matching host system
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    container_name: ${PROJECT_NAME:-myproject}-php-cli
    volumes:
      # Full project access for CLI operations
      - ../:/var/www:cached
      # Custom PHP configuration for CLI usage
      - ./php/php-cli.ini:/usr/local/etc/php/conf.d/custom.ini:ro
      # Composer cache persistence across container rebuilds
      - ~/.composer:/home/developer/.composer:cached
    environment:
      # Same database connection as FPM for CLI scripts
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${MYSQL_DATABASE:-laravel}
      - DB_USERNAME=${MYSQL_USER:-laravel}
      - DB_PASSWORD=${MYSQL_PASSWORD:-laravel}
    depends_on:
      # Database access for CLI operations
      - mysql
    working_dir: /var/www
    restart: unless-stopped
    # File permission consistency with host
    user: "${UID:-1000}:${GID:-1000}"
    # Keep container running and allow interactive sessions
    stdin_open: true
    tty: true

  # =============================================================================
  # MYSQL DATABASE
  # =============================================================================
  # MySQL 8.0 database server with persistent data storage
  # Configured for development with relaxed security settings
  mysql:
    image: ${MYSQL_IMAGE:-mysql:8.0}
    container_name: ${PROJECT_NAME:-myproject}-mysql
    environment:
      # Database configuration - customize in .env
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
      # Default database created on first startup
      - MYSQL_DATABASE=${MYSQL_DATABASE:-laravel}
      # Application database user (non-root)
      - MYSQL_USER=${MYSQL_USER:-laravel}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-laravel}
    volumes:
      # Persistent database storage (survives container rebuilds)
      - ./mysql-data:/var/lib/mysql
    ports:
      # External database access - customize in .env: MYSQL_PORT=3307
      - "${MYSQL_PORT:-3306}:3306"
    restart: unless-stopped
    # Use native password authentication for better compatibility
    command: --default-authentication-plugin=mysql_native_password

volumes:
  composer-cache:
    driver: local