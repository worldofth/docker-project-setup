# =============================================================================
# HTTP SERVER CONFIGURATION
# =============================================================================
# Always available server block handling non-encrypted traffic
# Serves both localhost and *.test domains for development flexibility
server {
    # Standard HTTP port
    listen 80;
    
    # Accept requests for localhost and any .test domain
    # Examples: localhost, myproject.test, api.myproject.test
    server_name localhost *.test;
    
    # Document root - where nginx looks for files to serve
    # Must match the volume mount in docker-compose.yml
    root /var/www/public;
    
    # Default files to serve when accessing a directory
    # Prioritizes PHP, then static HTML files
    index index.php index.html index.htm;

    # Maximum upload file size (important for file uploads)
    # Increase this value if your application handles large files
    client_max_body_size 100M;

    # =============================================================================
    # PRIMARY LOCATION BLOCK
    # =============================================================================
    # Main routing logic for all requests
    location / {
        # Try to serve request as file, then directory, then fall back to index.php
        # This enables clean URLs and proper routing for PHP frameworks
        # $query_string preserves GET parameters for framework routing
        try_files $uri $uri/ /index.php?$query_string;
    }

    # =============================================================================
    # PHP PROCESSING BLOCK
    # =============================================================================
    # Handle all .php file requests through PHP-FPM
    location ~ \.php$ {
        # Forward to PHP-FPM container on port 9000
        # Container name 'php-fpm' resolves via Docker networking
        fastcgi_pass php-fpm:9000;
        
        # Default script to execute if none specified
        fastcgi_index index.php;
        
        # Critical: tells PHP-FPM which script file to execute
        # $document_root = /var/www/public (from root directive above)
        # $fastcgi_script_name = the .php file from the URL
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        
        # Include standard FastCGI parameters
        include fastcgi_params;
        
        # =============================================================================
        # PROXY HEADERS FOR PROPER CLIENT INFORMATION
        # =============================================================================
        # These headers ensure PHP applications receive correct client details
        # Essential for logging, security, and framework functionality
        
        # Original hostname from client request
        fastcgi_param HTTP_HOST $host;
        # Real client IP address
        fastcgi_param HTTP_X_REAL_IP $remote_addr;
        # IP forwarding chain (important for load balancers)
        fastcgi_param HTTP_X_FORWARDED_FOR $proxy_add_x_forwarded_for;
        # Original protocol (http/https) - crucial for HTTPS detection
        fastcgi_param HTTP_X_FORWARDED_PROTO $scheme;
    }

    # =============================================================================
    # SECURITY BLOCKS
    # =============================================================================
    # Prevent access to sensitive files and directories
    
    # Block access to .htaccess and similar Apache config files
    # These files may contain sensitive configuration or security rules
    location ~ /\.ht {
        deny all;
    }

    # Block access to .git directory and files
    # Prevents exposure of source code history and repository information
    location ~ /\.git {
        deny all;
    }

    # =============================================================================
    # DRUPAL IMAGE STYLES PROCESSING
    # =============================================================================
    # Handle image style generation for missing images
    # When an image style doesn't exist, pass to Drupal for generation
    location ~* ^/sites/default/files/styles/.*\.(png|jpg|jpeg|gif|webp)$ {
        # Try to serve the file, if it doesn't exist, pass to Drupal
        try_files $uri /index.php?$query_string;
        
        # Cache generated image styles for reasonable time
        expires 30d;
        add_header Cache-Control "public";
    }
    
    # =============================================================================
    # STATIC ASSETS OPTIMIZATION
    # =============================================================================
    # Aggressive caching for static files to improve performance
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Cache static assets for 1 year
        # These files should have versioned filenames for cache busting
        expires 1y;
        
        # Tell browsers and CDNs these files never change
        # 'public' allows caching by intermediate proxies
        # 'immutable' tells modern browsers not to revalidate
        add_header Cache-Control "public, immutable";
        
        # Serve file if it exists, otherwise return 404
        # Don't fall back to index.php for missing assets
        try_files $uri =404;
    }

    # =============================================================================
    # SECURITY HEADERS
    # =============================================================================
    # Modern web security headers to protect against common attacks
    
    # Prevent clickjacking by restricting iframe embedding
    # SAMEORIGIN allows iframes from the same domain only
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # Enable browser XSS protection (legacy, but still useful)
    # Mode=block stops page rendering if XSS detected
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Prevent MIME type sniffing attacks
    # Forces browsers to respect declared content types
    add_header X-Content-Type-Options "nosniff" always;
    
    # Control referrer information sent to other sites
    # Balances privacy with functionality
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Content Security Policy - basic permissive policy
    # Customize this based on your application's specific needs
    # Current policy allows most content but provides some protection
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # =============================================================================
    # COMPRESSION SETTINGS
    # =============================================================================
    # Gzip compression to reduce bandwidth and improve load times
    
    # Enable gzip compression
    gzip on;
    
    # Add Vary header so caches know about compression
    # Prevents serving compressed content to clients that don't support it
    gzip_vary on;
    
    # Only compress files larger than 1KB
    # Small files may actually get larger when compressed
    gzip_min_length 1024;
    
    # Compress responses for proxied requests with these conditions
    # Ensures compression works properly behind load balancers/CDNs
    gzip_proxied expired no-cache no-store private auth;
    
    # File types to compress
    # Focuses on text-based files that benefit most from compression
    # Binary files (images, videos) are already compressed
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss;
}

# =============================================================================
# HTTPS SERVER CONFIGURATION
# =============================================================================
# Secure server block for encrypted traffic
# Only active when SSL certificates are present
server {
    # HTTPS port with SSL and HTTP/2 support
    # HTTP/2 provides significant performance improvements over HTTP/1.1
    listen 443 ssl http2;
    
    # Same server names as HTTP block for consistency
    server_name localhost *.test;
    
    # Same document root as HTTP server
    root /var/www/public;
    index index.php index.html index.htm;

    # Same upload limit as HTTP server
    client_max_body_size 100M;

    # =============================================================================
    # SSL/TLS CONFIGURATION
    # =============================================================================
    # Modern, secure SSL setup optimized for development
    
    # Certificate files (created by ensure-certs.sh or make certs)
    # These are symlinks pointing to project-specific certificates
    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/cert-key.pem;
    
    # Only allow modern, secure TLS versions
    # TLS 1.0 and 1.1 are deprecated due to security vulnerabilities
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # Strong cipher suites prioritizing security and performance
    # Focuses on AEAD ciphers (GCM) which provide both encryption and authentication
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    
    # Let client choose cipher (modern best practice)
    # Server cipher preference is legacy behavior
    ssl_prefer_server_ciphers off;
    
    # SSL session caching for performance
    # Allows reconnection without full handshake
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # =============================================================================
    # PRIMARY LOCATION BLOCK (HTTPS)
    # =============================================================================
    # Main routing logic - identical to HTTP server for consistency
    location / {
        # Try to serve request as file, then directory, then fall back to index.php
        # This enables clean URLs and proper routing for PHP frameworks
        # $query_string preserves GET parameters for framework routing
        try_files $uri $uri/ /index.php?$query_string;
    }

    # =============================================================================
    # PHP PROCESSING BLOCK (HTTPS)
    # =============================================================================
    # Handle all .php file requests through PHP-FPM
    # Configuration matches HTTP server for consistency
    location ~ \.php$ {
        # Forward to PHP-FPM container on port 9000
        fastcgi_pass php-fpm:9000;
        
        # Default script to execute if none specified
        fastcgi_index index.php;
        
        # Critical: tells PHP-FPM which script file to execute
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        
        # Include standard FastCGI parameters
        include fastcgi_params;
        
        # =============================================================================
        # PROXY HEADERS FOR PROPER CLIENT INFORMATION (HTTPS)
        # =============================================================================
        # These headers ensure PHP applications receive correct client details
        # Especially important for HTTPS - frameworks need to know original protocol
        
        # Original hostname from client request
        fastcgi_param HTTP_HOST $host;
        # Real client IP address
        fastcgi_param HTTP_X_REAL_IP $remote_addr;
        # IP forwarding chain (important for load balancers)
        fastcgi_param HTTP_X_FORWARDED_FOR $proxy_add_x_forwarded_for;
        # Original protocol (https) - crucial for HTTPS detection in frameworks
        fastcgi_param HTTP_X_FORWARDED_PROTO $scheme;
    }

    # =============================================================================
    # SECURITY BLOCKS (HTTPS)
    # =============================================================================
    # Prevent access to sensitive files and directories
    # Same protections as HTTP server
    
    # Block access to .htaccess and similar Apache config files
    location ~ /\.ht {
        deny all;
    }

    # Block access to .git directory and files
    # Prevents exposure of source code history and repository information
    location ~ /\.git {
        deny all;
    }

    # =============================================================================
    # DRUPAL IMAGE STYLES PROCESSING (HTTPS)
    # =============================================================================
    # Handle image style generation for missing images
    # When an image style doesn't exist, pass to Drupal for generation
    location ~* ^/sites/default/files/styles/.*\.(png|jpg|jpeg|gif|webp)$ {
        # Try to serve the file, if it doesn't exist, pass to Drupal
        try_files $uri /index.php?$query_string;
        
        # Cache generated image styles for reasonable time
        expires 30d;
        add_header Cache-Control "public";
    }
    
    # =============================================================================
    # STATIC ASSETS OPTIMIZATION (HTTPS)
    # =============================================================================
    # Aggressive caching for static files - identical to HTTP server
    # Static assets should be served with same performance optimizations
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Cache static assets for 1 year
        # These files should have versioned filenames for cache busting
        expires 1y;
        
        # Tell browsers and CDNs these files never change
        # 'public' allows caching by intermediate proxies
        # 'immutable' tells modern browsers not to revalidate
        add_header Cache-Control "public, immutable";
        
        # Serve file if it exists, otherwise return 404
        # Don't fall back to index.php for missing assets
        try_files $uri =404;
    }

    # =============================================================================
    # SECURITY HEADERS (HTTPS)
    # =============================================================================
    # Modern web security headers to protect against common attacks
    # Same security headers as HTTP server - essential for all traffic
    
    # Prevent clickjacking by restricting iframe embedding
    # SAMEORIGIN allows iframes from the same domain only
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # Enable browser XSS protection (legacy, but still useful)
    # Mode=block stops page rendering if XSS detected
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Prevent MIME type sniffing attacks
    # Forces browsers to respect declared content types
    add_header X-Content-Type-Options "nosniff" always;
    
    # Control referrer information sent to other sites
    # Balances privacy with functionality
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Content Security Policy - basic permissive policy
    # Customize this based on your application's specific needs
    # Current policy allows most content but provides some protection
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # =============================================================================
    # COMPRESSION SETTINGS (HTTPS)
    # =============================================================================
    # Gzip compression to reduce bandwidth and improve load times
    # Same compression settings as HTTP server for consistency
    
    # Enable gzip compression
    gzip on;
    
    # Add Vary header so caches know about compression
    # Prevents serving compressed content to clients that don't support it
    gzip_vary on;
    
    # Only compress files larger than 1KB
    # Small files may actually get larger when compressed
    gzip_min_length 1024;
    
    # Compress responses for proxied requests with these conditions
    # Ensures compression works properly behind load balancers/CDNs
    gzip_proxied expired no-cache no-store private auth;
    
    # File types to compress
    # Focuses on text-based files that benefit most from compression
    # Binary files (images, videos) are already compressed
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss;
}