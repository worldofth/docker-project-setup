# =============================================================================
# Docker PHP Development Environment Configuration
# =============================================================================
#
# This file contains all configurable options for the Docker development
# environment. Copy this file to .env and customize the values below.
#
# SETUP INSTRUCTIONS:
#   1. Copy this file: cp .env.example .env
#   2. Edit .env and set PROJECT_NAME (REQUIRED)
#   3. Customize other settings as needed
#   4. Run: make setup && make up
#
# IMPORTANT NOTES:
#   - Never commit the .env file to version control
#   - Use unique PROJECT_NAME for each project to avoid conflicts
#   - Choose different HTTP_PORT for each project running simultaneously
#   - Some changes require container rebuild: make rebuild
#
# =============================================================================

# =============================================================================
# PROJECT IDENTIFICATION (REQUIRED)
# =============================================================================

# Project name used for container naming and domain generation
# - Creates containers: {PROJECT_NAME}-nginx, {PROJECT_NAME}-php-fpm, etc.
# - Generates domain: https://{PROJECT_NAME}.test
# - MUST be unique per project to avoid container name conflicts
# - Use lowercase letters, numbers, and hyphens only
# - Examples: myapp, ecommerce-site, api-backend, blog-cms
# ‚ö†Ô∏è  REQUIRED: You must set this before running make up
PROJECT_NAME=

# =============================================================================
# PORT CONFIGURATION
# =============================================================================

# HTTP port for accessing the application
# - Choose different ports for multiple projects (8014, 8015, 8016, etc.)
# - This port serves both HTTP and HTTPS traffic
# - Must be available (not used by other applications)
# - Common development range: 8000-8999
HTTP_PORT=8014

# HTTPS port for SSL access (optional)
# - If not set, automatically uses HTTP_PORT + 1
# - Only customize if you need a specific HTTPS port
# - Requires SSL certificates (run: make certs)
HTTPS_PORT=8015

# External MySQL port for database client connections
# - Allows external tools (Sequel Pro, TablePlus, phpMyAdmin) to connect
# - Default 3306 may conflict with local MySQL installation
# - Use different ports for multiple projects (3306, 3307, 3308, etc.)
MYSQL_PORT=3306

# =============================================================================
# PHP RUNTIME CONFIGURATION
# =============================================================================

# PHP version to use for both FPM and CLI containers
# Available versions: 8.0, 8.1, 8.2, 8.3
# - Use same version across all containers for consistency
# - Check your application's PHP requirements
# - Newer versions offer better performance and security
# - Changing this requires: make rebuild
PHP_VERSION=8.2

# PHP extensions to install (comma-separated, no spaces)
# Commonly needed extensions:
# - pdo_mysql: MySQL database connectivity (usually required)
# - zip: Archive handling (required by Composer)
# - gd: Basic image processing
# - mbstring: Multibyte string handling (required by most frameworks)
# - xml: XML processing (required by many frameworks)
# - curl: HTTP client functionality
# Additional extensions you might need:
# - redis: Redis caching support
# - imagick: Advanced image processing
# - soap: SOAP protocol support
# - bcmath: Arbitrary precision math
# - intl: Internationalization support
# - pdo_pgsql: PostgreSQL support
PHP_EXTENSIONS=pdo_mysql zip gd

# =============================================================================
# DOCKER IMAGE SELECTION
# =============================================================================
# Uncomment alternatives if you need specific architectures or versions

# MySQL Database Images
# Default: Multi-architecture MySQL 8.0
MYSQL_IMAGE=mysql:8.0
# Alternative options:
# MYSQL_IMAGE=mariadb:10.11        # MySQL-compatible alternative
# MYSQL_IMAGE=mysql:5.7            # For legacy applications
# MYSQL_IMAGE=arm64v8/mysql:8.0    # ARM64 specific (usually not needed)

# Nginx Web Server Images
# Default: Lightweight Alpine-based nginx
NGINX_IMAGE=nginx:alpine
# Alternative options:
# NGINX_IMAGE=nginx:mainline-alpine  # Latest features, Alpine-based
# NGINX_IMAGE=nginx:latest           # Full Debian-based (larger)

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# MySQL root user password
# - Used for database administration and make db-cli
# - Keep secure but memorable for development
# - Different from application database user
MYSQL_ROOT_PASSWORD=root

# Application database settings
# - Database created automatically on first startup
# - Used by your PHP application for data storage
# - Should match your application's database configuration
MYSQL_DATABASE=mysql
MYSQL_USER=mysql
MYSQL_PASSWORD=mysql

# =============================================================================
# FILE PERMISSIONS (AUTO-CONFIGURED)
# =============================================================================
# These values are automatically set by setup.sh based on your system
# Only modify if you have specific requirements or permission issues

# User and Group IDs for file permission consistency between host and containers
# - Prevents "permission denied" errors
# - Auto-detected by running: id -u (UID) and id -g (GID)
# - Usually 1000 on Linux, varies on macOS
UID=1000
GID=1000

# =============================================================================
# FRAMEWORK-SPECIFIC EXAMPLES
# =============================================================================
# Copy these sections to quickly configure for popular frameworks

# üî• Laravel Project Configuration:
# PROJECT_NAME=my-laravel-app
# PHP_VERSION=8.2
# PHP_EXTENSIONS=pdo_mysql,zip,gd,mbstring,xml,curl,redis,bcmath
# MYSQL_DATABASE=laravel
# MYSQL_USER=laravel
# MYSQL_PASSWORD=secret

# üåç Drupal Project Configuration:
# PROJECT_NAME=my-drupal-site
# PHP_VERSION=8.1
# PHP_EXTENSIONS=pdo_mysql,zip,gd,mbstring,xml,curl,soap,bcmath,intl
# MYSQL_DATABASE=drupal
# MYSQL_USER=drupal
# MYSQL_PASSWORD=drupal

# üìù WordPress Project Configuration:
# PROJECT_NAME=my-wordpress-site
# PHP_VERSION=8.2
# PHP_EXTENSIONS=pdo_mysql,zip,gd,mbstring,xml,curl,imagick
# MYSQL_DATABASE=wordpress
# MYSQL_USER=wordpress
# MYSQL_PASSWORD=wordpress

# üõ†Ô∏è Symfony Project Configuration:
# PROJECT_NAME=my-symfony-app
# PHP_VERSION=8.2
# PHP_EXTENSIONS=pdo_mysql,zip,gd,mbstring,xml,curl,intl,opcache
# MYSQL_DATABASE=symfony
# MYSQL_USER=symfony
# MYSQL_PASSWORD=symfony

# =============================================================================
# SOLR SEARCH ENGINE CONFIGURATION (OPTIONAL)
# =============================================================================

# Solr 5.5.5 for legacy website compatibility
# - Enable when hosting websites that require this specific Solr version
# - Uses custom build context with legacy configuration
# - Separate port to avoid conflicts with newer Solr instances
SOLR_555_PORT=8984
SOLR_555_CORE_NAME=harbour
SOLR_555_ENABLE_CORS=true

# =============================================================================
# ACCESS INFORMATION
# =============================================================================
# After starting containers with 'make up', access your project at:
#
# üåê HTTP:  http://localhost:${HTTP_PORT}
# üîí HTTPS: https://${PROJECT_NAME}.test (requires certificates)
# üóÑÔ∏è  Database: localhost:${MYSQL_PORT} (external tools)
#
# üîë Generate SSL Certificates:
#   make certs                    # Trusted certificates with mkcert
#   ./scripts/generate-certs.sh   # Manual certificate generation
#
# üìä Database Access:
#   make db-cli                   # MySQL command line
#   External tools: Host=localhost, Port=${MYSQL_PORT}
#   Credentials: ${MYSQL_USER} / ${MYSQL_PASSWORD}

# =============================================================================
# TROUBLESHOOTING GUIDE
# =============================================================================
# Common issues and solutions:
#
# üö® "Port already in use":
#   - Change HTTP_PORT and MYSQL_PORT to unused values
#   - Check what's using ports: lsof -i :8014
#
# üö® "Permission denied" errors:
#   - Run: make fix-perms
#   - Check UID/GID values match your system: id -u && id -g
#
# üö® "Container name conflicts":
#   - Ensure PROJECT_NAME is unique across all projects
#   - Stop other projects: make down
#
# üö® "Database connection failed":
#   - Wait for MySQL to fully start: make logs-mysql
#   - Check database credentials match application config
#   - Verify MYSQL_DATABASE exists: make db-cli
#
# üö® "SSL certificate errors":
#   - Install mkcert: brew install mkcert
#   - Install CA: mkcert -install
#   - Generate certificates: make certs
#   - Restart browser after certificate generation
#
# üîß Useful Commands:
#   make help          # Show all available commands
#   make status        # Check container status
#   make logs          # View all container logs
#   make rebuild       # Rebuild after config changes
#   make clean         # Remove all containers and volumes